# reads data from a csv generated by particle_tracking.py
# Generates a dictionary called data_dict with keys as particle IDs and 'frames', 'xcoords', 'ycoords', and 'brightnesses' as sub-keys
# then trims particles with only one frame

import matplotlib.pyplot as plt
import numpy as np
import random
from scipy import stats

def analyze_particles(file_path, fps, laser_margin, min_brightness, test_name):

    #open csv file
    with open(file_path) as f:
        data = f.read().split('\n')
        lines = []
        for line in data:
            lines.append(line.split(','))

    #create data_dict
    i = 1
    data_dict = {}
    while i < len(lines)-1:
        id = lines[i][0]
        frames = lines[i+1]
        xcoords = lines[i+2]
        ycoords = lines[i+3]
        brightnesses = lines[i+4]
        data_dict[id] = {}
        data_dict[id]['frames'] = []
        data_dict[id]['xcoords'] = []
        data_dict[id]['ycoords'] = []
        data_dict[id]['brightnesses'] = []
        for j in range(1, len(frames)):
            data_dict[id]['frames'].append(int(frames[j]))
            if xcoords[j] == '':
                data_dict[id]['xcoords'].append(None)
                data_dict[id]['ycoords'].append(None)
                data_dict[id]['brightnesses'].append(None)
            else:
                try:
                    data_dict[id]['xcoords'].append(int(xcoords[j]))
                    data_dict[id]['ycoords'].append(int(ycoords[j]))
                    data_dict[id]['brightnesses'].append(int(float(brightnesses[j])))
                except ValueError:
                    data_dict[id]['xcoords'].append(None)
                    data_dict[id]['ycoords'].append(None)
                    data_dict[id]['brightnesses'].append(None)
        i += 5

    #trim 1-frame particles and out of frame particles
    ids = list(data_dict.keys())
    for id in ids:
        if len(data_dict[id]['frames']) == 1:
            data_dict.pop(id)
    ids = list(data_dict.keys())
    for id in ids:
        for brightness in data_dict[id]['brightnesses']:
            if brightness is None:
                data_dict.pop(id)
                break

    #find average starting y position, corresponding to laser position
    startys = {}
    startxs = {}
    for id in data_dict.keys():
        starty = data_dict[id]['ycoords'][0]
        # if starty < 400:
        #     print(id)
        #     print(data_dict[id]['frames'][0])
        startys[id] = starty
        startx = data_dict[id]['xcoords'][0]
        startxs[id] = startx
    startys_mm = [y*0.021 for y in startys.values() if y is not None]
    mean_starty = np.mean(list(startys.values()))
    print(mean_starty)

    #find y position of particles at their brightest point
    brightestys = {}
    for id in data_dict.keys():
        brightnesses = data_dict[id]['brightnesses']
        if all(b is None for b in brightnesses):
            continue
        max_brightness = max([b for b in brightnesses if b is not None])
        max_index = brightnesses.index(max_brightness)
        brightesty = data_dict[id]['ycoords'][max_index]
        if brightesty is not None:
            brightestys[id] = brightesty

    #plot histogram of y positions at brightest point
    #red margins indicate laser position (+- 8 pixels)
    fig = plt.figure()
    hist = plt.hist(brightestys.values(), bins=50, color='blue', alpha=0.7)
    plt.plot([mean_starty+laser_margin, mean_starty+laser_margin], [0, 800], color='red', linestyle='--')
    plt.plot([mean_starty-laser_margin, mean_starty-laser_margin], [0, 800], color='red', linestyle='--')
    plt.title('y positions at brightest point, ' + test_name)
    fig.canvas.manager.set_window_title('y-Positions at Brightes Point, ' + test_name)

    #plot histogram of maximum brightnesses
    max_brightnesses = {}
    ignition_times = {}
    for id in data_dict.keys():
        brightnesses = data_dict[id]['brightnesses']
        if all(b is None for b in brightnesses):
            continue
        max_brightness = max([b for b in brightnesses if b is not None])
        max_brightnesses[id] = max_brightness
        ignition_times[id] = (data_dict[id]['frames'][brightnesses.index(max_brightness)] - data_dict[id]['frames'][0])/fps*1000000
    fig = plt.figure()
    hist = plt.hist(max_brightnesses.values(), bins=200, color='blue', alpha=0.7)
    plt.title('maximum brightnesses ' + test_name)
    fig.canvas.manager.set_window_title('Maximum Brightness Distribution, ' + test_name)

    #trim particles that don't reach a certain maximum brightness
    ids = list(data_dict.keys())
    for id in ids:
        brightnesses = data_dict[id]['brightnesses']
        if all(b is None for b in brightnesses):
            continue
        max_brightness = max([b for b in brightnesses if b is not None])
        if max_brightness < min_brightness:
            data_dict.pop(id)
            max_brightnesses.pop(id)
            startys.pop(id)
            startxs.pop(id)
            ignition_times.pop(id)

    #trim particles that reach their brightest point inside the laser
    ids = list(data_dict.keys())
    for id in ids:
        if brightestys[id] > mean_starty - laser_margin and brightestys[id] < mean_starty + laser_margin:
            data_dict.pop(id)
            max_brightnesses.pop(id)
            startys.pop(id)
            startxs.pop(id)
            ignition_times.pop(id)

    #calculate burn times for remaining particles
    burn_times = {}
    for id in data_dict.keys():
        burn_time = (data_dict[id]['frames'][-1] - data_dict[id]['frames'][0])/fps*1000
        burn_times[id] = burn_time
    fig = plt.figure()
    hist = plt.hist(burn_times.values(), bins=int(max(list(burn_times.values()))*fps/1000), color='blue', alpha=0.7)
    plt.xlim(0, max(list(burn_times.values()))*1.1)
    plt.xlabel('burn time (ms)')
    plt.ylabel('count')
    plt.title('burn times, ' + test_name)
    fig.canvas.manager.set_window_title('Burn Times, ' + test_name)

    #plot burn time vs max brightness
    fig = plt.figure()
    plt.plot(max_brightnesses.values(), burn_times.values(), '.')
    plt.title('burn time vs max brightness, ' + test_name)
    fig.canvas.manager.set_window_title('Burn Time vs. Max Brightness, ' + test_name)
    print(len(data_dict.keys()))

    rs = []
    num_random = 12
    for i in range(num_random):
        rs.append(random.random())
    #plot random sample of brightness vs frame number and particle tracks
    fig = plt.figure()
    for i in range(10):
        r = rs[i]
        id = list(data_dict.keys())[int(r*len(data_dict.keys()))]
        plt.plot(range(len(data_dict[id]['frames'])), data_dict[id]['brightnesses'])
    plt.title('random sample of brightness vs frame number, ' + test_name)
    fig.canvas.manager.set_window_title('Random Sample of Brightness vs. Frame Number, ' + test_name)

    #plot particle tracks of random sample
    fig = plt.figure()
    for i in range(num_random):
        r = rs[i]
        id = list(data_dict.keys())[int(r*len(data_dict.keys()))]
        plt.plot(data_dict[id]['xcoords'], data_dict[id]['ycoords'], '.-')
    plt.title('random sample of particle tracks, ' + test_name)
    plt.plot([0, 800], [mean_starty+laser_margin, mean_starty+laser_margin], color='red', linestyle='--')
    plt.plot([0, 800], [mean_starty-laser_margin, mean_starty-laser_margin], color='red', linestyle='--')
    fig.canvas.manager.set_window_title('Random Sample of Particle Tracks, ' + test_name)

    #plot starting positions of all particles
    fig = plt.figure()
    plt.plot(startxs.values(), startys.values(), '.')
    plt.title('starting positions of all particles, ' + test_name)
    plt.plot([0, 800], [mean_starty+laser_margin, mean_starty+laser_margin], color='red', linestyle='--')
    plt.plot([0, 800], [mean_starty-laser_margin, mean_starty-laser_margin], color='red', linestyle='--')
    fig.canvas.manager.set_window_title('Statrting Position of all Particles, ' + test_name)

    #plot all particle tracks
    fig = plt.figure()
    for id in data_dict.keys():
        plt.plot(data_dict[id]['xcoords'], [800 - y for y in data_dict[id]['ycoords']], 'b-')
    plt.title('all particle tracks, ' + test_name)
    plt.plot([0, 800], [800 - mean_starty-laser_margin, 800 - mean_starty-laser_margin], color='red', linestyle='--')
    plt.plot([0, 800], [800 - mean_starty+laser_margin, 800 - mean_starty+laser_margin], color='red', linestyle='--')
    fig.canvas.manager.set_window_title('All Particle Tracks, ' + test_name)

    #plot histogram of ignition times
    fig = plt.figure()
    hist = plt.hist(ignition_times.values(), bins=int(max(list(ignition_times.values()))*fps/1000000), color='blue', alpha=0.7, density=True)
    plt.xlim(0, 2000)
    plt.title('ignition times (us), ' + test_name)
    fig.canvas.manager.set_window_title('Ignition Times, ' + test_name)

    fig = plt.figure()
    sorted_burn_times = np.sort(list(burn_times.values()))
    cdf = np.arange(1, len(sorted_burn_times)+1) / len(sorted_burn_times)
    plt.plot(sorted_burn_times, cdf, marker='.', linestyle='none')
    plt.title('Burn Time CDF, ' + test_name)
    plt.xlabel('Burn Time (ms)')
    plt.ylabel('Cumulative Probability')
    fig.canvas.manager.set_window_title('Burn Time CDF, ' + test_name)

    print(f"Average burn time for", test_name, f": {np.mean(list(burn_times.values())):.4f} ms")
    print(f"Average ignition time for", test_name, f": {np.mean(list(ignition_times.values())):.4f} us")

    return list(burn_times.values()), list(ignition_times.values())

if __name__ == "__main__":
    fps = 20000
    laser_margin = 15
    min_brightness = 10000
    file_names = [r"C:\Users\Griffin\Documents\Research\15 Sep particle tracking\test2_calibrated_particle_tracking_results.csv",
                  r"C:\Users\Griffin\Documents\Research\15 Sep particle tracking\test3_calibrated_particle_tracking_results.csv"]
    test_names = ['Al-Ga 10', 'Al-Ga 5']
    burn_times = []
    ignition_times = []
    for i in range(len(file_names)):
        testi_burn_times, testi_ignition_times = analyze_particles(file_names[i], fps, laser_margin, min_brightness, test_names[i])
        burn_times.append(testi_burn_times)
        ignition_times.append(testi_ignition_times)
    #uncomment to perform a statistical t-test
    burn_times = np.array(burn_times, dtype=object)
    ignition_times = np.array(ignition_times, dtype=object)
    t_stat, p_val = stats.ttest_ind(burn_times[0], burn_times[1], equal_var=False)
    print(f"t-statistic for burn times: {t_stat}, p-value: {p_val}")
    t_stat, p_val = stats.ttest_ind(ignition_times[0], ignition_times[1], equal_var=False)
    print(f"t-statistic for ignition times: {t_stat}, p-value: {p_val}")
    plt.show()